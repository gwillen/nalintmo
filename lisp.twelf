%use equality/integers.
%use equality/strings.

sexp : type.
num : integer -> sexp.
sym : string -> sexp.
nil : sexp.
cons : sexp -> sexp -> sexp.

ctx : type.
empty : ctx.
bind : sexp -> sexp -> ctx -> ctx.

parse-sym-char : string -> type.
parse-sym-char/a : parse-sym-char "a".
parse-sym-char/b : parse-sym-char "b".
parse-sym-char/c : parse-sym-char "c".
parse-sym-char/d : parse-sym-char "d".
parse-sym-char/e : parse-sym-char "e".
parse-sym-char/f : parse-sym-char "f".
parse-sym-char/g : parse-sym-char "g".
parse-sym-char/h : parse-sym-char "h".
parse-sym-char/i : parse-sym-char "i".
parse-sym-char/j : parse-sym-char "j".
parse-sym-char/k : parse-sym-char "k".
parse-sym-char/l : parse-sym-char "l".
parse-sym-char/m : parse-sym-char "m".
parse-sym-char/n : parse-sym-char "n".
parse-sym-char/o : parse-sym-char "o".
parse-sym-char/p : parse-sym-char "p".
parse-sym-char/q : parse-sym-char "q".
parse-sym-char/r : parse-sym-char "r".
parse-sym-char/s : parse-sym-char "s".
parse-sym-char/t : parse-sym-char "t".
parse-sym-char/u : parse-sym-char "u".
parse-sym-char/v : parse-sym-char "v".
parse-sym-char/w : parse-sym-char "w".
parse-sym-char/x : parse-sym-char "x".
parse-sym-char/y : parse-sym-char "y".
parse-sym-char/z : parse-sym-char "z".
parse-sym-char/z : parse-sym-char "z".
parse-sym-char/A : parse-sym-char "A".
parse-sym-char/B : parse-sym-char "B".
parse-sym-char/C : parse-sym-char "C".
parse-sym-char/D : parse-sym-char "D".
parse-sym-char/E : parse-sym-char "E".
parse-sym-char/F : parse-sym-char "F".
parse-sym-char/G : parse-sym-char "G".
parse-sym-char/H : parse-sym-char "H".
parse-sym-char/I : parse-sym-char "I".
parse-sym-char/J : parse-sym-char "J".
parse-sym-char/K : parse-sym-char "K".
parse-sym-char/L : parse-sym-char "L".
parse-sym-char/M : parse-sym-char "M".
parse-sym-char/N : parse-sym-char "N".
parse-sym-char/O : parse-sym-char "O".
parse-sym-char/P : parse-sym-char "P".
parse-sym-char/Q : parse-sym-char "Q".
parse-sym-char/R : parse-sym-char "R".
parse-sym-char/S : parse-sym-char "S".
parse-sym-char/T : parse-sym-char "T".
parse-sym-char/U : parse-sym-char "U".
parse-sym-char/V : parse-sym-char "V".
parse-sym-char/W : parse-sym-char "W".
parse-sym-char/X : parse-sym-char "X".
parse-sym-char/Y : parse-sym-char "Y".
parse-sym-char/Z : parse-sym-char "Z".
parse-sym-char/_ : parse-sym-char "_".
parse-sym-char/- : parse-sym-char "-".
parse-sym-char/+ : parse-sym-char "+".
parse-sym-char/* : parse-sym-char "*".

%{
bool : type.
true : bool.
false : bool.

isfalse : bool -> type.
isfalse/f : isfalse false.

istrue : bool -> type.
istrue/t : istrue true.

empty-bool : string -> bool -> type.
empty-bool/empty : empty-bool "" true.
empty-bool/other : empty-bool _ false.
%%deterministic empty-bool.

not-empty : string -> type.
not-empty/ne : not-empty X
               <- empty-bool X Y
               <- isfalse Y.

%solve DIDID : not-empty "asdf".

% BUG: Doesn't fucking work, and I don't fucking know why.
one-char-bool : string -> bool -> type.
one-char-bool/empty : one-char-bool "" false.
one-char-bool/two : one-char-bool (X ++ Y) false
                    <- not-empty X.
                    <- not-empty Y.
one-char-bool/other : one-char-bool _ true.
%%deterministic one-char-bool.

one-char : string -> type.
one-char/oc : one-char X
              <- one-char-bool X Y
              <- istrue Y.

%solve DODOD : one-char-bool "asdfasdfasdfasdf" _.

parse-sym-char : string -> type.
}%

parse-digit : string -> integer -> type.
parse-digit/0 : parse-digit "0" 0.
parse-digit/1 : parse-digit "1" 1.
parse-digit/2 : parse-digit "2" 2.
parse-digit/3 : parse-digit "3" 3.
parse-digit/4 : parse-digit "4" 4.
parse-digit/5 : parse-digit "5" 5.
parse-digit/6 : parse-digit "6" 6.
parse-digit/7 : parse-digit "7" 7.
parse-digit/8 : parse-digit "8" 8.
parse-digit/9 : parse-digit "9" 9.

%{
is-digit : string -> type.
is-digit/x : is-digit X
             <- parse-digit X _.

is-digit-bool : string -> bool -> type.
is-digit-bool/digit : is-digit-bool D true
                      <- is-digit D.
is-digit-bool/other : is-digit-bool _ false.
%deterministic is-digit-bool.

not-digit : string -> type.
not-digit/nd : not-digit X
               <- is-digit-bool X Y
               <- isfalse Y.
}%

parse-white : string -> type.
parse-white/none : parse-white "".
parse-white/++ : parse-white (" " ++ Y)
                 <- parse-white Y.

%{
is-white-bool : string -> bool -> type.
is-white-bool/white : is-white-bool W true
                      <- parse-white W.
is-white-bool/other : is-white-bool _ false.
%deterministic is-white-bool.

not-white : string -> type.
not-white/nw : not-white X
               <- is-white-bool X Y
               <- isfalse Y.

is-paren-bool : string -> bool -> type.
is-paren-bool/lp : is-paren-bool "(" true.
is-paren-bool/rp : is-paren-bool ")" true.
is-paren-bool/other : is-paren-bool _ false.
%deterministic is-paren-bool.

is-sym-char-bool : string -> bool -> type.
is-sym-char-bool/white : is-sym-char-bool " " false.
is-sym-char-bool/lp : is-sym-char-bool "(" false.
is-sym-char-bool/rp : is-sym-char-bool ")" false.
is-sym-char-bool/digit : is-sym-char-bool X false
                          <- is-digit X.
is-sym-char-bool/other-char : is-sym-char-bool X true
                              <- one-char X.
is-sym-char-bool/other : is-sym-char-bool X false.
%deterministic is-sym-char-bool.

parse-sym-char : string -> type.
parse-sym-char/sc : parse-sym-char X
                    <- is-sym-char-bool X Y
                    <- istrue Y.
}%

parse-real-white : string -> type.
parse-real-white/spc : parse-real-white " ".
parse-real-white/++ : parse-real-white (" " ++ Y)
                      <- parse-real-white Y.

parse-char : string -> type.
parse-char/SYM : parse-char S
                 <- parse-sym-char S.
parse-char/LPAR : parse-char "(".
parse-char/RPAR : parse-char ")".
parse-char/SP : parse-char " ".
parse-char/DIGIT : parse-char D
                   <- parse-digit D _.

% First integer is an accumulator initialized to 0.
parse-int : string -> integer -> integer -> type.
% Putting more before dig makes the parser greedy. Doing it the other way fails
%   miserably, turning every digit into its own number.
parse-int/more : parse-int (X ++ Rest) Acc Ntot
                 <- parse-digit X NX
                 <- parse-int Rest (10 * Acc + NX) Ntot.
% Require at least one digit to parse as an integer.
parse-int/dig : parse-int X Acc (10 * Acc + NX)
                <- parse-digit X NX.

parse-sym : string -> type.
% Putting ++ before c makes the parser greedy. Doing it the other way fails
%   miserably, turning every char into its own symbol.
parse-sym/++ : parse-sym (X ++ Y)
               <- parse-sym-char Y
               <- parse-sym X.
parse-sym/c : parse-sym X
              <- parse-sym-char X.

parse : string -> sexp -> type.
parse-list : string -> sexp -> type.

parse-list/nil : parse-list X nil
                 <- parse-white X.
parse-list/single : parse-list X (cons A nil)
                    <- parse X A.
parse-list/cons : parse-list (X ++ Y ++ Z) (cons A B)
                  <- parse X A
                  <- parse-real-white Y
                  <- parse-list Z B.
 
parse/number : parse X (num NX)
               <- parse-int X 0 NX.
parse/sym : parse X (sym X)
            <- parse-sym X.
parse/list : parse ("(" ++ L ++ ")") List
             <- parse-list L List.

%solve D : parse "(progn (define (fact n) (cond ((eq n 0) 1) (1 (* n (fact (- n 1)))))) (fact 5))" X.

lookup : ctx -> sexp -> sexp -> type.
lookup/found : lookup (bind K V _) K V.
lookup/rest : lookup (bind _ _ C) K V
              <- lookup C K V.

eval : ctx -> sexp -> sexp -> type.
eval/num : eval _ (num N) (num N).
eval/nil : eval _ nil nil.

